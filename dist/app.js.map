{"version":3,"sources":["webpack:///./src/index.js","webpack:///./src/demo/index.js","webpack:///./src/stuff/promise.js","webpack:///./src/aco/index.js","webpack:///./src/aco/ant.js","webpack:///./src/stuff/math.js","webpack:///./src/stuff/route.js","webpack:///./src/opt/index.js","webpack:///./src/aco/colony.js","webpack:///./src/problem/tsp.js","webpack:///./src/index.html"],"names":["tsp","logger","logRoute","period","route","length","console","log","logGraphInfo","graph","numberOfAnts","rho","duration","acoDemo","alpha","beta","Q","colony","Colony","distances","periods","i","then","notify","setNotify","iterate","pheromones","pass","delay","arg","Promise","resolve","setTimeout","Ant","base","routeLength","numberOfNodes","currentNode","unvisited","filter","node","indexOf","nextNode","push","calculateWeight","distance","pheromone","Math","pow","weights","map","sumOfWeights","probs","weight","randomNode","sumOf","range","randomIndexFrom","arr","reduce","preVal","curVal","end","Array","from","v","k","rand","random","randId","amount","len","lengthOfRoute","to","sqrt","x","y","cur","next","twoOptSwap","twoOptComplete","start","paths","slice","reverse","currentRoute","nextPath","concat","noImprovement","j","initializePheromones","ants","setPopulation","shortestRouteLength","Number","MAX_VALUE","n","newAnt","exploreRoutes","indentifyBestPath","updatePheromones","forEach","ant","findRoute","evaporatePheromones","layPheromones","value","TSP","width","height","nodes","generateRandomNodes","vi","vj"],"mappings":"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","file":"app.js","sourcesContent":["import { acoDemo } from 'demo';\r\nimport { TSP } from 'problem/tsp';\r\n\r\n\r\nlet tsp = new TSP(20);\r\n\r\nlet logger = {\r\n\tlogRoute: function (period, route, length) {\r\n\t\tconsole.log(period, route, length);\r\n\t},\r\n\tlogGraphInfo: function (graph) { }\r\n}\r\n\r\nacoDemo(tsp, logger, {\r\n\tnumberOfAnts: 10,\r\n\trho: 0.1,\r\n\tduration: 10\r\n});\n\n\n// WEBPACK FOOTER //\n// ./src/index.js","import { pass, delay } from 'stuff/promise';\r\n\r\nimport { Ant } from 'aco';\r\nimport { TSP } from 'problem/tsp';\r\n\r\n\r\n/**\r\n * Ant Colony Optimization algorithm demo\r\n * \r\n * @param {TSP} tsp\r\n */\r\nexport function acoDemo(tsp,\r\n\t{\r\n\t\tlogRoute = () => { },\r\n\t\tlogGraphInfo = () => { }\r\n\t}, {\r\n\t\tnumberOfAnts = 2,\r\n\t\trho = 1,\r\n\t\talpha = 1,\r\n\t\tbeta = 1,\r\n\t\tQ = 1,\r\n\t\tduration = 100\r\n\t}) {\r\n\r\n\tlet colony = new Colony(tsp.distances, {\r\n\t\tnumberOfAnts: numberOfAnts,\r\n\t\trho: rho,\r\n\t\talpha: alpha,\r\n\t\tbeta: beta,\r\n\t\tQ: Q\r\n\t});\r\n\r\n\tlet periods = pass();\r\n\tfor (let i = 0; i < 100; ++i) {\r\n\t\tperiods = periods.then(() => {\r\n\t\t\tlet notify = (route, length) => {\r\n\t\t\t\tlogRoute(i, route, length);\r\n\t\t\t}\r\n\t\t\tcolony.setNotify(notify);\r\n\t\t\t\r\n\t\t\tcolony.iterate();\r\n\r\n\t\t\tlogGraphInfo(colony.pheromones);\r\n\t\t})\r\n\t\t\t.then(delay(duration));\r\n\t}\r\n\r\n\tperiods.then(() => console.log('done'));\r\n\r\n\treturn periods;\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/demo/index.js","/**\r\n * Pass the arguments for next promise task\r\n */\r\nexport function pass(...arg)\r\n{\r\n\treturn new Promise(resolve =>\r\n\t{\r\n\t\tresolve(...arg);\r\n\t});\r\n}\r\n\r\n\r\n/**\r\n * Delay promise in given duration\r\n * \r\n * E.g.\r\n * ```\r\n * emit('ok').then(delay(duration)).then(console.log);\r\n * ```\r\n * \r\n * @param {number} duration millisecond\r\n */\r\nexport function delay(duration)\r\n{\r\n\treturn (...arg) =>\r\n\t{\r\n\t\treturn new Promise(resolve =>\r\n\t\t{\r\n\t\t\tsetTimeout(() => {resolve(...arg)}, duration);\r\n\t\t});\r\n\t}\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/stuff/promise.js","export { Ant } from './ant.js';\r\nexport { Colony } from './colony.js';\n\n\n// WEBPACK FOOTER //\n// ./src/aco/index.js","import { randomIndexFrom, range, sumOf } from 'stuff/math';\r\nimport { lengthOfRoute } from 'stuff/route';\r\n\r\nimport { twoOptComplete } from 'opt';\r\n\r\nexport class Ant {\r\n\tconstructor({alpha = 1, beta = 1, Q = 1}) {\r\n\t\tthis.alpha = alpha;\r\n\t\tthis.beta = beta;\r\n\t\tthis.Q = Q;\r\n\r\n\t\tthis.base = 0;\r\n\r\n\t\tthis.route = [];\r\n\t\tthis.routeLength;\r\n\t}\r\n\r\n\t/**\r\n\t * Construct a new solution\r\n\t * \r\n\t * @param {number[][]} distances\r\n\t * @param {number[][]} pheromones\r\n\t */\r\n\tfindRoute(distances, pheromones) {\r\n\t\tlet route = [this.base];\r\n\t\tlet numberOfNodes = distances.length;\r\n\r\n\t\twhile (route.length < numberOfNodes) {\r\n\t\t\tlet currentNode = route[route.length - 1],\r\n\t\t\t\tunvisited = range(numberOfNodes).filter((node) => {\r\n\t\t\t\t\treturn route.indexOf(node) == -1\r\n\t\t\t\t}),\r\n\t\t\t\tnextNode = this.nextNode(currentNode, unvisited, distances, pheromones);\r\n\r\n\t\t\troute.push(nextNode);\r\n\t\t}\r\n\r\n\t\t/** Optional */\r\n\t\t// twoOptComplete(route, distances);\r\n\r\n\t\troute.push(this.base);\r\n\r\n\t\tthis.route = route;\r\n\t\tthis.routeLength = lengthOfRoute(this.route, distances);\r\n\t}\r\n\r\n\t/**\r\n\t * Choose next node from probabilities\r\n\t * \r\n\t * @param {number} currentNode\r\n\t * @param {number[]} unvisited\r\n\t * @param {number[][]} distances\r\n\t * @param {number[][]} pheromones\r\n\t */\r\n\tnextNode(currentNode, unvisited, distances, pheromones) {\r\n\t\tlet numberOfNodes = distances.length;\r\n\r\n\t\tlet calculateWeight = (distance, pheromone) => {\r\n\t\t\tdistance = distance < 0.1 ? 0.1 : distance;\r\n\t\t\treturn Math.pow(1 / distance, this.alpha) * Math.pow(pheromone, this.beta);\r\n\t\t}\r\n\r\n\t\tlet weights = unvisited.map(node => {\r\n\t\t\treturn calculateWeight(distances[currentNode][node], pheromones[currentNode][node]);\r\n\t\t});\r\n\t\tlet sumOfWeights = sumOf(weights);\r\n\t\tlet probs = weights.map(weight => weight / sumOfWeights);\r\n\r\n\t\tlet randomNode = unvisited[randomIndexFrom(probs)];\r\n\t\treturn randomNode;\r\n\t}\r\n\r\n\t/**\r\n\t * Leave trail marking\r\n\t * \r\n\t * @param {number[][]} distances\r\n\t * @param {number[][]} pheromones\r\n\t */\r\n\tlayPheromones(distances, pheromones) {\r\n\t\tlet numberOfNodes = distances.length;\r\n\r\n\t\tfor (let i = 0; i < numberOfNodes; ++i) {\r\n\t\t\tlet currentNode = this.route[i],\r\n\t\t\t\tnextNode = this.route[i + 1];\r\n\r\n\t\t\tpheromones[currentNode][nextNode] += 1 / distances[currentNode][nextNode];\r\n\t\t\tpheromones[nextNode][currentNode] += pheromones[currentNode][nextNode];\r\n\t\t}\r\n\t}\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/aco/ant.js","/**\r\n * @param {number[]} arr\r\n */\r\nexport function sumOf(arr)\r\n{\r\n\treturn arr.reduce((preVal, curVal) => preVal + curVal);\r\n}\r\n\r\n\r\n/**\r\n * Return an array of number from the given range\r\n * \r\n * @param {number} end\r\n */\r\nexport function range(end)\r\n{\r\n\treturn Array.from({length: end}, (v, k) => k);\r\n}\r\n\r\n\r\n/**\r\n * Get a random index from probabilities\r\n * \r\n * @param {number[]} probs probabilities\r\n */\r\nexport function randomIndexFrom(probs)\r\n{\r\n\tlet rand = Math.random();\r\n\r\n\tlet randId = -1;\r\n\tlet amount = 0;\r\n\tlet len = probs.length;\r\n\r\n\tdo {\r\n\t\trandId++;\r\n\t\tamount += probs[randId];\r\n\t} while (rand > amount && randId < len);\r\n\r\n\treturn randId;\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/stuff/math.js","/**\r\n * Return distance between two point\r\n * \r\n * @param {{x: number, y: number}} from\r\n * @param {{x: number, y: number}} to\r\n */\r\nexport function distance(from, to)\r\n{\r\n\treturn Math.sqrt(Math.pow(to.x - from.x, 2) + Math.pow(to.y - from.y, 2));\r\n}\r\n\r\n\r\n/**\r\n * Give the total length of the route from matrix of distances\r\n * \r\n * @param {number[]} route\r\n * @param {number[][]} distances\r\n */\r\nexport function lengthOfRoute(route, distances)\r\n{\r\n\tlet len = route.length;\r\n\r\n\tlet distance = 0;\r\n\tfor (let i = 0; i < len - 1; ++i)\r\n\t{\r\n\t\tlet cur = route[i],\r\n\t\t\tnext = route[i + 1];\r\n\t\t\t\r\n\t\tdistance += distances[cur][next];\r\n\t}\r\n\r\n\treturn distance;\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/stuff/route.js","/**\r\n * Return a new route by performing 2-OPT swap\r\n * \r\n * @param {number[]} route\r\n * @param {number} start\r\n * @param {number} end\r\n */\r\nexport function twoOptSwap(route, start, end)\r\n{\r\n\tlet paths = [\r\n\t\t\troute.slice(0, start),\r\n\t\t\troute.slice(start, end).reverse(),\r\n\t\t\troute.slice(end)\r\n\t\t];\r\n\r\n\treturn paths.reduce((currentRoute, nextPath) => currentRoute.concat(nextPath), []);\r\n}\r\n\r\n\r\n/**\r\n * Perform 2-OPT complete search\r\n * \r\n * @param {number[]} route\r\n * @param {number[][]} distances\r\n */\r\nexport function twoOptComplete(route, distances)\r\n{\r\n\tlet noImprovement = true;\r\n\tlet numberOfNodes = distances.length;\r\n\tdo {\r\n\t\tfor (let i = 1; i < numberOfNodes; ++i)\r\n\t\t{\r\n\t\t\tfor (let j = i + 1; j < numberOfNodes; ++j)\r\n\t\t\t{\r\n\t\t\t\tif (distances[i - 1][i] + distances[j - 1][j] < distances[i - 1][j] + distances[j - 1][i])\r\n\t\t\t\t{\r\n\t\t\t\t\troute = twoOptSwap(route, start, end);\r\n\t\t\t\t\tnoImprovement = false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t} while (noImprovement);\r\n\r\n\treturn route;\r\n}\r\n\r\n\r\n/**\r\n * Return distance between two point\r\n * \r\n * @param {{x: number, y: number}} from\r\n * @param {{x: number, y: number}} to\r\n */\r\nexport function distance(from, to)\r\n{\r\n\treturn Math.sqrt(Math.pow(to.x - from.x, 2) + Math.pow(to.y - from.y, 2));\r\n}\r\n\r\n\r\n/**\r\n * Give the total length of the route from matrix of distances\r\n * \r\n * @param {number[]} route\r\n * @param {number[][]} distances\r\n */\r\nexport function lengthOfRoute(route, distances)\r\n{\r\n\tlet len = route.length;\r\n\r\n\tlet distance = 0;\r\n\tfor (let i = 0; i < len - 1; ++i)\r\n\t{\r\n\t\tlet cur = route[i],\r\n\t\t\tnext = route[i + 1];\r\n\t\t\t\r\n\t\tdistance += distances[cur][next];\r\n\t}\r\n\r\n\treturn distance;\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/opt/index.js","import { Ant } from './ant.js';\r\n\r\nexport class Colony {\r\n\t/**\r\n\t * @param {number[][]} distances\r\n\t */\r\n\tconstructor(distances, { numberOfAnts = 20, rho = 1, alpha = 1, beta = 1, Q = 1\t}) {\r\n\t\tthis.distances = distances;\r\n\t\tthis.pheromones = [];\r\n\r\n\t\tthis.initializePheromones();\r\n\r\n\t\tthis.rho = rho;\r\n\t\tthis.alpha = alpha;\r\n\t\tthis.beta = beta;\r\n\t\tthis.Q = Q;\r\n\r\n\t\tthis.ants = [];\r\n\t\tthis.numberOfAnts = 0;\r\n\r\n\t\tthis.setPopulation(numberOfAnts);\r\n\r\n\t\tthis.shortestRouteLength = Number.MAX_VALUE;\r\n\t}\r\n\r\n\tinitializePheromones() {\r\n\t\tthis.pheromones = this.distances.map((v, i) => v.map((n, j) => {\r\n\t\t\treturn this.distances[i][j];\r\n\t\t}));\r\n\t}\r\n\r\n\t/**\r\n\t * Determine the number of ants in the Colony\r\n\t * \r\n\t * @param {number} numberOfAnts\r\n\t */\r\n\tsetPopulation(numberOfAnts) {\r\n\t\tlet newAnt = () => new Ant({ alpha: this.alpha, beta: this.beta, Q: this.Q, });\r\n\t\tthis.ants = Array.from({ length: numberOfAnts }, newAnt);\r\n\t\tthis.numberOfAnts = numberOfAnts;\r\n\t}\r\n\r\n\titerate() {\r\n\t\tthis.exploreRoutes();\r\n\t\tthis.indentifyBestPath();\r\n\t\tthis.updatePheromones();\r\n\t}\r\n\r\n\t/**\r\n\t * Send out ants to explorer routes\r\n\t */\r\n\texploreRoutes() {\r\n\t\tthis.ants.forEach(ant => {\r\n\t\t\tant.findRoute(this.distances, this.pheromones)\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Deamon actions\r\n\t */\r\n\tindentifyBestPath() {\r\n\t\tthis.ants.forEach(ant => {\r\n\t\t\tif (this.shortestRouteLength > ant.routeLength) {\r\n\t\t\t\tthis.shortestRouteLength = ant.routeLength;\r\n\t\t\t\tthis.notify(ant.route, ant.routeLength);\r\n\t\t\t}\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * Reinforce better routes\r\n\t */\r\n\tupdatePheromones() {\r\n\t\tthis.evaporatePheromones();\r\n\t\tthis.ants.forEach(ant => {\r\n\t\t\tant.layPheromones(this.distances, this.pheromones);\r\n\t\t})\r\n\t}\r\n\r\n\tevaporatePheromones() {\r\n\t\tthis.pheromones = this.pheromones.map(v =>\r\n\t\t\tv.map((value) => (1 - this.rho) * value));\r\n\t}\r\n\r\n\t/**\r\n\t * Notify better route\r\n\t */\r\n\tnotify() {\r\n\r\n\t}\r\n\r\n\tsetNotify(notify) {\r\n\t\tthis.notify = notify;\r\n\t}\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/aco/colony.js","import { distance } from 'stuff/route';\r\n\r\n/**\r\n * Travel Saleman Problem\r\n */\r\nexport class TSP {\r\n\t/**\r\n\t * @param {number} [numberOfNodes]\r\n\t */\r\n\tconstructor(numberOfNodes = 20) {\r\n\t\t/** @readonly */\r\n\t\tthis.numberOfNodes;\r\n\r\n\t\tthis.width = 20;\r\n\t\tthis.height = 20;\r\n\r\n\t\t/** @readonly */\r\n\t\tthis.nodes = [];\r\n\t\t/** @readonly */\r\n\t\tthis.distances = [[]];\r\n\r\n\t\tthis.generateRandomNodes(numberOfNodes);\r\n\t}\r\n\r\n\t/**\r\n\t * Generate random nodes from given number\r\n\t * \r\n\t * @param {number} numberOfNodes\r\n\t */\r\n\tgenerateRandomNodes(numberOfNodes) {\r\n\t\tlet randomNode = () => {\r\n\t\t\treturn { x: Math.random() * this.width, y: Math.random() * this.height }\r\n\t\t}\r\n\r\n\t\tthis.nodes = Array.from({ length: numberOfNodes }, randomNode);\r\n\t\tthis.numberOfNodes = numberOfNodes;\r\n\t\tthis.distances = Array.from({ length: numberOfNodes }, (vi, i) => {\r\n\t\t\treturn Array.from({ length: numberOfNodes }, (vj, j) => distance(this.nodes[i], this.nodes[j]));\r\n\t\t});\r\n\t}\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/problem/tsp.js","module.exports = __webpack_public_path__ + \"index.html\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/index.html\n// module id = 11\n// module chunks = 0"],"sourceRoot":""}