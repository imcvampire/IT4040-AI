{"version":3,"sources":["webpack:///./src/index.js","webpack:///./src/demo/demo.js","webpack:///./src/helpers.js","webpack:///./src/aco/ant.js","webpack:///./src/aco/colony.js","webpack:///./src/problem/tsp.js","webpack:///./src/index.html"],"names":["tsp","logger","logRoute","period","route","length","console","log","logGraphInfo","graph","numberOfAnts","rho","duration","acoDemo","alpha","beta","Q","colony","distances","periods","i","then","notify","setNotify","iterate","pheromones","sumOf","range","randomIndexFrom","pass","delay","twoOptSwap","twoOptComplete","distance","lengthOfRoute","arr","reduce","preVal","curVal","end","Array","from","v","k","probs","rand","Math","random","randId","amount","len","arg","Promise","resolve","setTimeout","start","paths","slice","reverse","currentRoute","nextPath","concat","noImprovement","numberOfNodes","j","to","sqrt","pow","x","y","cur","next","Ant","base","routeLength","currentNode","push","nextNode","unvisited","node","indexOf","calculateWeight","pheromone","unvisitedNodes","filter","weights","map","sumOfWeights","weight","randomNode","Colony","initializePheromones","ants","setPopulation","shortestRouteLength","Number","MAX_VALUE","n","newAnt","exploreRoutes","indentifyBestPath","updatePheromones","forEach","ant","findRoute","evaporatePheromones","layPheromones","value","TSP","width","height","nodes","generateRandomNodes","vi","vj"],"mappings":"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","file":"app.js","sourcesContent":["import { acoDemo } from './demo/demo.js';\r\nimport { TSP } from './problem/tsp.js';\r\n\r\nlet tsp = new TSP(100);\r\n\r\nlet logger = {\r\n\tlogRoute: function (period, route, length) {\r\n\t\tconsole.log(period, route, length);\r\n\t},\r\n\tlogGraphInfo: function (graph) { }\r\n}\r\n\r\nacoDemo(tsp, logger, {\r\n\tnumberOfAnts: 40,\r\n\trho: 2,\r\n\tduration: 10\r\n});\n\n\n// WEBPACK FOOTER //\n// ./src/index.js","import { pass, delay } from '../helpers.js';\r\n\r\nimport { Ant } from '../aco/ant.js';\r\nimport { Colony } from '../aco/colony.js';\r\nimport { TSP } from '../problem/tsp.js';\r\n\r\n\r\n/**\r\n * Ant Colony Optimization algorithm demo\r\n * \r\n * @param {TSP} tsp\r\n */\r\nexport function acoDemo(tsp,\r\n\t{\r\n\t\tlogRoute = () => { },\r\n\t\tlogGraphInfo = () => { }\r\n\t}, {\r\n\t\tnumberOfAnts = 2,\r\n\t\trho = 1,\r\n\t\talpha = 1,\r\n\t\tbeta = 1,\r\n\t\tQ = 1,\r\n\t\tduration = 100\r\n\t}) {\r\n\r\n\tlet colony = new Colony(tsp.distances, {\r\n\t\tnumberOfAnts: numberOfAnts,\r\n\t\trho: rho,\r\n\t\talpha: alpha,\r\n\t\tbeta: beta,\r\n\t\tQ: Q\r\n\t});\r\n\r\n\tlet periods = pass();\r\n\tfor (let i = 0; i < 100; ++i) {\r\n\t\tperiods = periods.then(() => {\r\n\t\t\tlet notify = (route, length) => {\r\n\t\t\t\tlogRoute(i, route, length);\r\n\t\t\t}\r\n\t\t\tcolony.setNotify(notify);\r\n\t\t\t\r\n\t\t\tcolony.iterate();\r\n\r\n\t\t\tlogGraphInfo(colony.pheromones);\r\n\t\t})\r\n\t\t\t.then(delay(duration));\r\n\t}\r\n\r\n\tperiods.then(() => console.log('done'));\r\n\r\n\treturn periods;\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/demo/demo.js","\r\n/**\r\n * @param {number[]} arr\r\n */\r\nexport function sumOf(arr)\r\n{\r\n\treturn arr.reduce((preVal, curVal) => preVal + curVal);\r\n}\r\n\r\n\r\n/**\r\n * Return an array of number from the given range\r\n * \r\n * @param {number} end\r\n */\r\nexport function range(end)\r\n{\r\n\treturn Array.from({length: end}, (v, k) => k);\r\n}\r\n\r\n\r\n/**\r\n * Get a random index from probabilities\r\n * \r\n * @param {number[]} probs probabilities\r\n */\r\nexport function randomIndexFrom(probs)\r\n{\r\n\tlet rand = Math.random();\r\n\r\n\tlet randId = -1;\r\n\tlet amount = 0;\r\n\tlet len = probs.length;\r\n\r\n\tdo {\r\n\t\trandId++;\r\n\t\tamount += probs[randId];\r\n\t} while (rand > amount && randId < len);\r\n\r\n\treturn randId;\r\n}\r\n\r\n\r\n/**\r\n * Pass the arguments for next promise task\r\n */\r\nexport function pass(...arg)\r\n{\r\n\treturn new Promise(resolve =>\r\n\t{\r\n\t\tresolve(...arg);\r\n\t});\r\n}\r\n\r\n\r\n/**\r\n * Delay promise in given duration\r\n * \r\n * E.g.\r\n * ```\r\n * emit('ok').then(delay(duration)).then(console.log);\r\n * ```\r\n * \r\n * @param {number} duration millisecond\r\n */\r\nexport function delay(duration)\r\n{\r\n\treturn (...arg) =>\r\n\t{\r\n\t\treturn new Promise(resolve =>\r\n\t\t{\r\n\t\t\tsetTimeout(() => {resolve(...arg)}, duration);\r\n\t\t});\r\n\t}\r\n}\r\n\r\n\r\n\r\n/**\r\n * Return a new route by performing 2-OPT swap\r\n * \r\n * @param {number[]} route\r\n * @param {number} start\r\n * @param {number} end\r\n */\r\nexport function twoOptSwap(route, start, end)\r\n{\r\n\tlet paths = [\r\n\t\t\troute.slice(0, start),\r\n\t\t\troute.slice(start, end).reverse(),\r\n\t\t\troute.slice(end)\r\n\t\t];\r\n\r\n\treturn paths.reduce((currentRoute, nextPath) => currentRoute.concat(nextPath), []);\r\n}\r\n\r\n\r\n/**\r\n * Perform 2-OPT complete search\r\n * \r\n * @param {number[]} route\r\n * @param {number[][]} distances\r\n */\r\nexport function twoOptComplete(route, distances)\r\n{\r\n\tlet noImprovement = true;\r\n\tlet numberOfNodes = distances.length;\r\n\tdo {\r\n\t\tfor (let i = 1; i < numberOfNodes; ++i)\r\n\t\t{\r\n\t\t\tfor (let j = i + 1; j < numberOfNodes; ++j)\r\n\t\t\t{\r\n\t\t\t\tif (distances[i - 1][i] + distances[j - 1][j] < distances[i - 1][j] + distances[j - 1][i])\r\n\t\t\t\t{\r\n\t\t\t\t\troute = twoOptSwap(route, start, end);\r\n\t\t\t\t\tnoImprovement = false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t} while (noImprovement);\r\n\r\n\treturn route;\r\n}\r\n\r\n\r\n/**\r\n * Return distance between two point\r\n * \r\n * @param {{x: number, y: number}} from\r\n * @param {{x: number, y: number}} to\r\n */\r\nexport function distance(from, to)\r\n{\r\n\treturn Math.sqrt(Math.pow(to.x - from.x, 2) + Math.pow(to.y - from.y, 2));\r\n}\r\n\r\n\r\n/**\r\n * Give the total length of the route from matrix of distances\r\n * \r\n * @param {number[]} route\r\n * @param {number[][]} distances\r\n */\r\nexport function lengthOfRoute(route, distances)\r\n{\r\n\tlet len = route.length;\r\n\r\n\tlet distance = 0;\r\n\tfor (let i = 0; i < len - 1; ++i)\r\n\t{\r\n\t\tlet cur = route[i],\r\n\t\t\tnext = route[i + 1];\r\n\t\t\t\r\n\t\tdistance += distances[cur][next];\r\n\t}\r\n\r\n\treturn distance;\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/helpers.js","import { twoOptComplete, randomIndexFrom, lengthOfRoute, range, sumOf } from '../helpers.js';\r\n\r\nexport class Ant {\r\n\tconstructor({alpha = 1, beta = 1, Q = 1}) {\r\n\t\tthis.alpha = alpha;\r\n\t\tthis.beta = beta;\r\n\t\tthis.Q = Q;\r\n\r\n\t\tthis.base = 0;\r\n\r\n\t\tthis.route = [];\r\n\t\tthis.routeLength;\r\n\t}\r\n\r\n\t/**\r\n\t * Construct a new solution\r\n\t * \r\n\t * @param {number[][]} distances\r\n\t * @param {number[][]} pheromones\r\n\t */\r\n\tfindRoute(distances, pheromones) {\r\n\t\tthis.route = [this.base];\r\n\t\tlet numberOfNodes = distances.length;\r\n\r\n\t\twhile (this.route.length < numberOfNodes) {\r\n\t\t\tlet currentNode = this.route[this.route.length - 1];\r\n\t\t\tthis.route.push(this.nextNode(currentNode, distances, pheromones));\r\n\t\t}\r\n\r\n\t\t/** Optional */\r\n\t\t// twoOptComplete(route, distances);\r\n\r\n\t\tthis.route.push(this.base);\r\n\t\tthis.routeLength = lengthOfRoute(this.route, distances);\r\n\t}\r\n\r\n\t/**\r\n\t * Choose next node from probabilities\r\n\t * \r\n\t * @param {number} currentNode\r\n\t * @param {number[][]} distances\r\n\t * @param {number[][]} pheromones\r\n\t */\r\n\tnextNode(currentNode, distances, pheromones) {\r\n\t\tlet numberOfNodes = distances.length;\r\n\r\n\t\tlet unvisited = (node) => {\r\n\t\t\treturn this.route.indexOf(node) == -1;\r\n\t\t};\r\n\t\tlet calculateWeight = (distance, pheromone) => {\r\n\t\t\tdistance = distance < 0.1 ? 0.1 : distance;\r\n\t\t\treturn Math.pow(1 / distance, this.alpha) * Math.pow(pheromone, this.beta);\r\n\t\t}\r\n\r\n\t\tlet unvisitedNodes = range(numberOfNodes).filter(unvisited);\r\n\r\n\t\tlet weights = unvisitedNodes.map(node => {\r\n\t\t\treturn calculateWeight(distances[currentNode][node], pheromones[currentNode][node]);\r\n\t\t});\r\n\t\tlet sumOfWeights = sumOf(weights);\r\n\t\tlet probs = weights.map(weight => weight / sumOfWeights);\r\n\r\n\t\tlet randomNode = unvisitedNodes[randomIndexFrom(probs)];\r\n\t\treturn randomNode;\r\n\t}\r\n\r\n\t/**\r\n\t * Leave trail marking\r\n\t * \r\n\t * @param {number[][]} distances\r\n\t * @param {number[][]} pheromones\r\n\t */\r\n\tlayPheromones(distances, pheromones) {\r\n\t\tlet numberOfNodes = distances.length;\r\n\r\n\t\tfor (let i = 0; i < numberOfNodes; ++i) {\r\n\t\t\tlet currentNode = this.route[i],\r\n\t\t\t\tnextNode = this.route[i + 1];\r\n\r\n\t\t\tpheromones[currentNode][nextNode] += 1 / distances[currentNode][nextNode];\r\n\t\t\tpheromones[nextNode][currentNode] += pheromones[currentNode][nextNode];\r\n\t\t}\r\n\t}\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/aco/ant.js","import { Ant } from './ant.js';\r\nimport { lengthOfRoute } from '../helpers.js';\r\n\r\nexport class Colony {\r\n\t/**\r\n\t * @param {number[][]} distances\r\n\t */\r\n\tconstructor(distances, { numberOfAnts = 20, rho = 1, alpha = 1, beta = 1, Q = 1\t}) {\r\n\t\tthis.distances = distances;\r\n\t\tthis.pheromones = [];\r\n\r\n\t\tthis.initializePheromones();\r\n\r\n\t\tthis.rho = rho;\r\n\t\tthis.alpha = alpha;\r\n\t\tthis.beta = beta;\r\n\t\tthis.Q = Q;\r\n\r\n\t\tthis.ants = [];\r\n\t\tthis.numberOfAnts = 0;\r\n\r\n\t\tthis.setPopulation(numberOfAnts);\r\n\r\n\t\tthis.shortestRouteLength = Number.MAX_VALUE;\r\n\t}\r\n\r\n\tinitializePheromones() {\r\n\t\tthis.pheromones = this.distances.map((v, i) => v.map((n, j) => {\r\n\t\t\treturn this.distances[i][j];\r\n\t\t}));\r\n\t}\r\n\r\n\t/**\r\n\t * Determine the number of ants in the Colony\r\n\t * \r\n\t * @param {number} numberOfAnts\r\n\t */\r\n\tsetPopulation(numberOfAnts) {\r\n\t\tlet newAnt = () => new Ant({ alpha: this.alpha, beta: this.beta, Q: this.Q, });\r\n\t\tthis.ants = Array.from({ length: numberOfAnts }, newAnt);\r\n\t\tthis.numberOfAnts = numberOfAnts;\r\n\t}\r\n\r\n\titerate() {\r\n\t\tthis.exploreRoutes();\r\n\t\tthis.indentifyBestPath();\r\n\t\tthis.updatePheromones();\r\n\t}\r\n\r\n\t/**\r\n\t * Send out ants to explorer routes\r\n\t */\r\n\texploreRoutes() {\r\n\t\tthis.ants.forEach(ant => {\r\n\t\t\tant.findRoute(this.distances, this.pheromones)\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Deamon actions\r\n\t */\r\n\tindentifyBestPath() {\r\n\t\tthis.ants.forEach(ant => {\r\n\t\t\tif (this.shortestRouteLength > ant.routeLength) {\r\n\t\t\t\tthis.shortestRouteLength = ant.routeLength;\r\n\t\t\t\tthis.notify(ant.route, ant.routeLength);\r\n\t\t\t}\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * Reinforce better routes\r\n\t */\r\n\tupdatePheromones() {\r\n\t\tthis.evaporatePheromones();\r\n\t\tthis.ants.forEach(ant => {\r\n\t\t\tant.layPheromones(this.distances, this.pheromones);\r\n\t\t})\r\n\t}\r\n\r\n\tevaporatePheromones() {\r\n\t\tthis.pheromones = this.pheromones.map(v =>\r\n\t\t\tv.map((value) => (1 - this.rho) * value));\r\n\t}\r\n\r\n\t/**\r\n\t * Notify better route\r\n\t */\r\n\tnotify() {\r\n\r\n\t}\r\n\r\n\tsetNotify(notify) {\r\n\t\tthis.notify = notify;\r\n\t}\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/aco/colony.js","import { distance } from '../helpers.js';\r\n\r\n/**\r\n * Travel Saleman Problem\r\n */\r\nexport class TSP {\r\n\t/**\r\n\t * @param {number} [numberOfNodes]\r\n\t */\r\n\tconstructor(numberOfNodes = 20) {\r\n\t\t/** @readonly */\r\n\t\tthis.numberOfNodes;\r\n\r\n\t\tthis.width = 20;\r\n\t\tthis.height = 20;\r\n\r\n\t\t/** @readonly */\r\n\t\tthis.nodes = [];\r\n\t\t/** @readonly */\r\n\t\tthis.distances = [[]];\r\n\r\n\t\tthis.generateRandomNodes(numberOfNodes);\r\n\t}\r\n\r\n\t/**\r\n\t * Generate random nodes from given number\r\n\t * \r\n\t * @param {number} numberOfNodes\r\n\t */\r\n\tgenerateRandomNodes(numberOfNodes) {\r\n\t\tlet randomNode = () => {\r\n\t\t\treturn { x: Math.random() * this.width, y: Math.random() * this.height }\r\n\t\t}\r\n\r\n\t\tthis.nodes = Array.from({ length: numberOfNodes }, randomNode);\r\n\t\tthis.numberOfNodes = numberOfNodes;\r\n\t\tthis.distances = Array.from({ length: numberOfNodes }, (vi, i) => {\r\n\t\t\treturn Array.from({ length: numberOfNodes }, (vj, j) => distance(this.nodes[i], this.nodes[j]));\r\n\t\t});\r\n\t}\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/problem/tsp.js","module.exports = __webpack_public_path__ + \"index.html\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/index.html\n// module id = 7\n// module chunks = 0"],"sourceRoot":""}